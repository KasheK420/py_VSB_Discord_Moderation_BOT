name: Build & Push Docker Image

on:
  push:
    branches: [ main, master, dev, develop, stage* ]
  workflow_dispatch:

env:
  IMAGE_NAME: vsb_bot
  REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Resolve tags from branch
        id: meta
        run: |
          BR="${GITHUB_REF_NAME}"
          if [ "$BR" = "main" ] || [ "$BR" = "master" ]; then
            ENV_TAG="PROD"
          elif [[ "$BR" == stage* ]]; then
            ENV_TAG="STAGE"
          elif [ "$BR" = "dev" ] || [ "$BR" = "develop" ]; then
            ENV_TAG="DEV"
          else
            ENV_TAG="DEV"
          fi
          BRANCH_TAG=$(echo "$BR" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          SHA_TAG="${GITHUB_SHA::7}"
          echo "env_tag=${ENV_TAG}" >> $GITHUB_OUTPUT
          echo "branch_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute image ref
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          {
            echo "image=${IMAGE}"
            echo "tags<<TAGS"
            echo "${IMAGE}:${{ steps.meta.outputs.env_tag }}"
            echo "${IMAGE}:${{ steps.meta.outputs.sha_tag }}"
            echo "${IMAGE}:${{ steps.meta.outputs.branch_tag }}"
            echo "TAGS"
            echo "cache_ref=${IMAGE}:buildcache"
          } >> $GITHUB_OUTPUT

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.image.outputs.tags }}
          cache-from: type=registry,ref=${{ steps.image.outputs.cache_ref }}
          cache-to: type=registry,ref=${{ steps.image.outputs.cache_ref }},mode=max
